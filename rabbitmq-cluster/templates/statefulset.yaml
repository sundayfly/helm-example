kind: StatefulSet
apiVersion: apps/v1
metadata:
  {{- if .Values.labels }}
  labels:
    {{- with .Values.labels }}
       {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- else }}
  labels: {{ include "rabbitmq-cluster.lables" . | nindent 4 }}
  {{- end }}
  name: {{ .Chart.Name}}
spec:
  replicas: {{ .Values.replicaCount}}
  selector:
    matchLabels:
      {{- with .Values.labels }}
         {{- toYaml . | nindent 6 }}
      {{- end }}
  serviceName: {{ .Values.service.headless.name }}
  template:
    metadata:
      labels:
        {{- with .Values.labels }}
           {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
    {{- if .Values.affinity.nodeAntiAffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:
              matchExpressions:
              {{- range $k, $v := .Values.labels }}  
              - key: {{ $k }}
                operator: In
                values:
                - "{{ $v }}"
              {{- end }}
      {{- end }}
      containers:
      - args:
        - -c
        - cp -v /etc/rabbitmq/rabbitmq.conf ${RABBITMQ_CONFIG_FILE}; exec docker-entrypoint.sh
          rabbitmq-server
        command:
        - sh
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: {{ .Values.secret.name }}
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: {{ .Values.secret.name }}
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              key: cookie
              name: {{ .Values.secret.name }}
        - name: K8S_SERVICE_NAME
          value: {{ .Values.service.headless.name }}
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_NODENAME
          value: rabbit@$(POD_NAME).{{- .Values.service.headless.name -}}.$(POD_NAMESPACE).svc.cluster.local
        - name: RABBITMQ_CONFIG_FILE
          value: /var/lib/rabbitmq/rabbitmq.conf
        image: {{ .Values.image.repository}}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        livenessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 30
          timeoutSeconds: 10
        name: rabbitmq
        ports:
        - containerPort: 15672
          name: http
          protocol: TCP
        - containerPort: 5672
          name: amqp
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 10
          timeoutSeconds: 10
        {{- if .Values.resources.enable }}
        resources:
          limits:
            cpu: "{{ .Values.resources.limits.cpu }}"
            memory: "{{ .Values.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.resources.requests.cpu }}"
            memory: "{{ .Values.resources.requests.memory }}"
        {{- end }}
        volumeMounts:
        - mountPath: /etc/rabbitmq
          name: config-volume
          readOnly: false
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-storage
          readOnly: false
      serviceAccountName: {{ .Values.serviceAccount.name }}
      terminationGracePeriodSeconds: 30
      nodeSelector:
      {{- with .Values.nodeSelector }}
         {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - configMap:
          items:
          - key: rabbitmq.conf
            path: rabbitmq.conf
          - key: enabled_plugins
            path: enabled_plugins
          name: {{ .Values.configmap.name }} 
        name: config-volume
{{- if .Values.persistence.enable }}
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-storage
    spec:
      accessModes:
      {{- with .Values.persistence.storageClass.accessModes }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
      storageClassName: {{ .Values.persistence.storageClass.name }}
      resources:
        requests:
          storage: {{ .Values.persistence.storageClass.size }}
{{- else if .Values.persistence.hostPath.enable }}
      - name: rabbitmq-storage
        hostPath:
          path: {{ .Values.persistence.hostPath.path }}
          type: {{ .Values.persistence.hostPath.type }}
{{- else }}
      - name: rabbitmq-storage
        emptyDir: {}
{{- end }}
